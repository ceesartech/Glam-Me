# Production Configuration for GlamMe Platform
# This file contains environment-specific configuration

spring:
  profiles:
    active: prod
  application:
    name: glamme-platform

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/glamme_db
    username: ${DB_USERNAME:glamme_admin}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

# AWS Configuration
aws:
  region: ${AWS_REGION:us-east-1}
  s3:
    bucket: ${S3_BUCKET:glamme-bucket}

# Cognito Configuration
cognito:
  user-pool-id: ${COGNITO_USER_POOL_ID}
  client-id: ${COGNITO_CLIENT_ID}

# OpenSearch Configuration
opensearch:
  endpoint: ${OPENSEARCH_ENDPOINT}

# Logging Configuration
logging:
  level:
    tech.ceesar.glamme: INFO
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    com.amazonaws: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /
  error:
    include-stacktrace: never

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# Security Configuration
security:
  jwt:
    secret: ${JWT_SECRET:your-256-bit-secret-here}
    expiration: 86400000  # 24 hours in milliseconds

# Stripe Configuration (for Shopping Service)
stripe:
  api-key: ${STRIPE_API_KEY}
  webhook-secret: ${STRIPE_WEBHOOK_SECRET}

# EasyPost Configuration (for Shopping Service)
easypost:
  api-key: ${EASYPOST_API_KEY}

# OpenAI Configuration (for Image Service)
openai:
  api-key: ${OPENAI_API_KEY}

# AWS SES Configuration (for Communication Service)
aws:
  ses:
    from-email: ${SES_FROM_EMAIL:noreply@glamme.com}

# Database Migration
spring.flyway:
  enabled: true
  locations: classpath:db/migration
  baseline-on-migrate: true
