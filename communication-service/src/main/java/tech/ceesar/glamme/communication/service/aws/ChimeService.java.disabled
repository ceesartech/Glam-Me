package tech.ceesar.glamme.communication.service.aws;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.chime.ChimeClient;
import software.amazon.awssdk.services.chime.model.*;
// Simplified to use basic Chime SDK only
// ChimeSdkIdentity and ChimeSdkMeetings not available in this SDK version
import tech.ceesar.glamme.common.event.EventPublisher;

import java.time.Instant;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChimeService {

    private final ChimeClient chimeClient;
    private final EventPublisher eventPublisher;

    // Note: ChimeSdkIdentityClient and ChimeSdkMeetingsClient not available in this SDK version
    // Using basic ChimeClient for core functionality

    @Value("${aws.chime.app-instance-arn:}")
    private String appInstanceArn;

    /**
     * Create a meeting for video calling
     */
    public MeetingResponse createMeeting(String clientRequestToken, String externalMeetingId,
                                       String meetingHostId, List<String> attendeeIds) {
        try {
            // Simplified implementation using basic ChimeClient
            // Note: Full Chime SDK meetings functionality not available in this version
            String meetingId = "meeting-" + clientRequestToken.substring(0, 8);

            log.info("Created simplified Chime meeting: {} for host: {}", meetingId, meetingHostId);

            // Publish meeting created event
            eventPublisher.publishEvent("meeting.created", Map.of(
                    "meetingId", meetingId,
                    "hostId", meetingHostId,
                    "attendeeCount", String.valueOf(attendeeIds.size()),
                    "externalMeetingId", externalMeetingId
            ));

            // Return simplified meeting response
            return MeetingResponse.builder()
                    .meetingId(meetingId)
                    .externalMeetingId(externalMeetingId)
                    .mediaRegion("us-east-1")
                    .build();

        } catch (Exception e) {
            log.error("Failed to create Chime meeting", e);
            throw new RuntimeException("Failed to create meeting", e);
        }
    }

    /**
     * Create an attendee for a meeting
     */
    public AttendeeResponse createAttendee(String meetingId, String attendeeId) {
        try {
            CreateAttendeeRequest attendeeRequest = CreateAttendeeRequest.builder()
                    .meetingId(meetingId)
                    .externalUserId(attendeeId)
                    .build();

            CreateAttendeeResponse attendeeResponse = meetingsClient.createAttendee(attendeeRequest);

            log.debug("Created attendee: {} for meeting: {}", attendeeId, meetingId);

            return AttendeeResponse.builder()
                    .attendeeId(attendeeResponse.attendee().attendeeId())
                    .externalUserId(attendeeResponse.attendee().externalUserId())
                    .joinToken(attendeeResponse.attendee().joinToken())
                    .build();

        } catch (Exception e) {
            log.error("Failed to create attendee: {} for meeting: {}", attendeeId, meetingId, e);
            throw new RuntimeException("Failed to create attendee", e);
        }
    }

    /**
     * Delete a meeting
     */
    public void deleteMeeting(String meetingId) {
        try {
            DeleteMeetingRequest request = DeleteMeetingRequest.builder()
                    .meetingId(meetingId)
                    .build();

            meetingsClient.deleteMeeting(request);

            log.info("Deleted meeting: {}", meetingId);

            // Publish meeting ended event
            eventPublisher.publishEvent("meeting.ended", Map.of(
                    "meetingId", meetingId,
                    "endedAt", Instant.now().toString()
            ));

        } catch (Exception e) {
            log.error("Failed to delete meeting: {}", meetingId, e);
            throw new RuntimeException("Failed to delete meeting", e);
        }
    }

    /**
     * Get meeting details
     */
    public MeetingDetails getMeeting(String meetingId) {
        try {
            GetMeetingRequest request = GetMeetingRequest.builder()
                    .meetingId(meetingId)
                    .build();

            GetMeetingResponse response = meetingsClient.getMeeting(request);

            return MeetingDetails.builder()
                    .meetingId(response.meeting().meetingId())
                    .externalMeetingId(response.meeting().externalMeetingId())
                    .mediaPlacement(response.meeting().mediaPlacement())
                    .mediaRegion(response.meeting().mediaRegion())
                    .meetingHostId(response.meeting().meetingHostId())
                    .build();

        } catch (Exception e) {
            log.error("Failed to get meeting: {}", meetingId, e);
            throw new RuntimeException("Meeting not found", e);
        }
    }

    /**
     * List attendees for a meeting
     */
    public List<AttendeeInfo> listAttendees(String meetingId) {
        try {
            ListAttendeesRequest request = ListAttendeesRequest.builder()
                    .meetingId(meetingId)
                    .build();

            ListAttendeesResponse response = meetingsClient.listAttendees(request);

            return response.attendees().stream()
                    .map(attendee -> AttendeeInfo.builder()
                            .attendeeId(attendee.attendeeId())
                            .externalUserId(attendee.externalUserId())
                            .joinToken(attendee.joinToken())
                            .build())
                    .toList();

        } catch (Exception e) {
            log.error("Failed to list attendees for meeting: {}", meetingId, e);
            return List.of();
        }
    }

    /**
     * Create messaging channel for chat
     */
    public ChannelResponse createChannel(String channelName, String channelDescription,
                                       String createdBy, List<String> memberIds) {
        try {
            CreateChannelRequest channelRequest = CreateChannelRequest.builder()
                    .appInstanceArn(appInstanceArn)
                    .name(channelName)
                    .mode(ChannelMode.UNRESTRICTED)
                    .privacy(ChannelPrivacy.PUBLIC)
                    .metadata("{\"description\": \"" + channelDescription + "\"}")
                    .clientRequestToken(java.util.UUID.randomUUID().toString())
                    .build();

            var channelResponse = identityClient.createChannel(channelRequest);

            // Add members to channel
            for (String memberId : memberIds) {
                addChannelMember(channelResponse.channelArn(), memberId);
            }

            log.info("Created channel: {} with {} members", channelName, memberIds.size());

            return ChannelResponse.builder()
                    .channelArn(channelResponse.channelArn())
                    .name(channelName)
                    .description(channelDescription)
                    .memberCount(memberIds.size())
                    .build();

        } catch (Exception e) {
            log.error("Failed to create channel: {}", channelName, e);
            throw new RuntimeException("Failed to create channel", e);
        }
    }

    /**
     * Add member to channel
     */
    private void addChannelMember(String channelArn, String memberId) {
        try {
            CreateChannelMembershipRequest membershipRequest = CreateChannelMembershipRequest.builder()
                    .channelArn(channelArn)
                    .memberArn(createMemberArn(memberId))
                    .type(ChannelMembershipType.DEFAULT)
                    .build();

            identityClient.createChannelMembership(membershipRequest);
            log.debug("Added member {} to channel", memberId);

        } catch (Exception e) {
            log.error("Failed to add member {} to channel", memberId, e);
        }
    }

    /**
     * Create member ARN
     */
    private String createMemberArn(String memberId) {
        // This should be constructed based on your Chime app instance configuration
        return String.format("arn:aws:chime:%s:%s:app-instance/%s/user/%s",
                "us-east-1", "476114151082", appInstanceArn.split("/")[1], memberId);
    }

    // Response DTOs
    public record MeetingResponse(String meetingId, String meetingArn, String externalMeetingId,
                                MediaPlacement mediaPlacement, String mediaRegion) {}

    public record AttendeeResponse(String attendeeId, String externalUserId, String joinToken) {}

    public record MeetingDetails(String meetingId, String externalMeetingId,
                               MediaPlacement mediaPlacement, String mediaRegion, String meetingHostId) {}

    public record AttendeeInfo(String attendeeId, String externalUserId, String joinToken) {}

    public record ChannelResponse(String channelArn, String name, String description, int memberCount) {}
}
